{
  "_args": [
    [
      {
        "raw": "copy-props@^2.0.1",
        "scope": null,
        "escapedName": "copy-props",
        "name": "copy-props",
        "rawSpec": "^2.0.1",
        "spec": ">=2.0.1 <3.0.0",
        "type": "range"
      },
      "C:\\gulp\\node_modules\\gulp\\node_modules\\gulp-cli"
    ]
  ],
  "_from": "copy-props@>=2.0.1 <3.0.0",
  "_id": "copy-props@2.0.4",
  "_inCache": true,
  "_location": "/copy-props",
  "_nodeVersion": "10.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/copy-props_2.0.4_1526219120001_0.6283586133186712"
  },
  "_npmUser": {
    "name": "sttk",
    "email": "sttk.xslet@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "copy-props@^2.0.1",
    "scope": null,
    "escapedName": "copy-props",
    "name": "copy-props",
    "rawSpec": "^2.0.1",
    "spec": ">=2.0.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gulp/gulp-cli"
  ],
  "_resolved": "https://registry.npmjs.org/copy-props/-/copy-props-2.0.4.tgz",
  "_shasum": "93bb1cadfafd31da5bb8a9d4b41f471ec3a72dfe",
  "_shrinkwrap": null,
  "_spec": "copy-props@^2.0.1",
  "_where": "C:\\gulp\\node_modules\\gulp\\node_modules\\gulp-cli",
  "author": {
    "name": "Takayuki Sato"
  },
  "bugs": {
    "url": "https://github.com/sttk/copy-props/issues"
  },
  "dependencies": {
    "each-props": "^1.3.0",
    "is-plain-object": "^2.0.1"
  },
  "description": "Copy properties deeply between two objects.",
  "devDependencies": {
    "browserify": "^16.2.2",
    "chai": "^3.5.0",
    "coveralls": "^3.0.1",
    "eslint": "^4.19.1",
    "mocha": "^3.2.0",
    "nyc": "^11.7.2",
    "uglify-js": "^3.3.24"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-7cjuUME+p+S3HZlbllgsn2CDwS+5eCCX16qBgNC4jgSTf49qR1VKy/Zhl400m0IQXl/bPGEVqncgUUMjrr4s8A==",
    "shasum": "93bb1cadfafd31da5bb8a9d4b41f471ec3a72dfe",
    "tarball": "https://registry.npmjs.org/copy-props/-/copy-props-2.0.4.tgz",
    "fileCount": 4,
    "unpackedSize": 14012,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa+EFxCRA9TVsSAnZWagAAw/oQAJP29VqIwhaW7wYN+6rA\nlDojc24CHkkk8MWAnSpZL4aFr50liAr/bmwH0aK/DlS/vqWJ+Mi6jOmxt9D9\nI6sNMia0BFZxcV4yjuboQLEZl3MlNypyy9mLf8A61FNwUL8hpnlmG/92PyZJ\nuOwCU1diZBWwl5BoBXrhf2n6cWmCPVKED372GyWNXY3xVAR27CrPz6sNPj6i\nXt8wZv0JqQw4M3b/P+w0u9gvTxHlfHcpRqfWgQ/HjvknVCNylX7dHuitlFVW\nONfwju6IFCtWaOwO2EHf1CAH8Po7sOq6TuRh7SA0Fef6jvZmdqNmxqIHAQ0x\nXV6X5zljOlZwiOZwsJbI8LNT3OAhciNHh3/KnVsuWbGz3DUKcDhoPujfJb7Z\nWE+Qm0iyiKiwPrrsSIKt5i7/fD5ZR2H0ieLMl/4dw3axLwUGkj/TsSb4PZkN\nJSHgP2+uQtYSSN71z27JO0WpXO2EOlqKO2CVGtof4mPzNHuF3Uu3e0aaDRIn\nw7Hd8brt0MdL6jbaXwRpPCgrvnFkRY99yzzsSG23shDlQiCc0RVpv27Puw8Q\nwMxLgmUtlkXcCFbbeiQZg4nENvWTZH/1fDlNR7dGUwwCe6Ls/avSKCUGm93F\nwxevExEDDwdbda0WaKVzKLN99dZWfjljfhlm8hqajIEGzDlm9Ita1Elz1sK5\ne0gX\r\n=2EDz\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://github.com/sttk/copy-props#readme",
  "keywords": [
    "object",
    "property",
    "copy",
    "deep",
    "map",
    "convert"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "sttk",
      "email": "t110000508260@yahoo.co.jp"
    }
  ],
  "name": "copy-props",
  "optionalDependencies": {},
  "readme": "# [copy-props][repo-url] [![NPM][npm-img]][npm-url] [![MIT License][mit-img]][mit-url] [![Build Status][travis-img]][travis-url] [![Build Status][appveyor-img]][appveyor-url] [![Coverage Status][coverage-img]][coverage-url]\n\nCopy properties between two objects deeply.\n\n## Install\n\nTo install from npm:\n\n```sh\n$ npm i copy-props --save\n```\n\n## Load this module\n\nFor Node.js:\n\n```js\nconst copyProps = require('copy-props');\n```\n\nFor Web browser:\n\n```html\n<script src=\"copy-props.min.js\"></script>\n```\n\n## Usage\n\nCopy *src* to *dst* simply (and return *dst*) :\n\n```js\nvar src = { a: 1, b: { b1: 'bbb' }, c: 'ccc' };\nvar dst = { a: 2, b: { b1: 'xxx', b2: 'yyy' } };\n\ncopyProps(src, dst);\n// => { a: 1, b: { b1: 'bbb', b2: 'yyy' }, c: 'ccc' }\n```\n\nCopy *src* to *dst* with property mapping (and return *dst*) :\n\n```js\nvar src = { a: 1, b: { b1: 'bbb' }, c: 'ccc', d: 'ddd' };\nvar dst = { f: { a: 2, b1: 'xxx', b2: 'yyy' }, e: 'zzz' };\n\ncopyProps(src, dst, {\n  a: 'f.a',\n  'b.b1': 'f.b1',\n  'b.b2': 'f.b2',\n  'c': 'f.c',\n});\n// => { f: { a: 1, b1: 'bbb', b2: 'yyy', c: 'ccc' }, e: 'zzz' }\n```\n\nCopy *src* to *dst* with convert function (and return *dst*) :\n\n```js\nvar src = { a: 1, b: { b1: 'bbb' } };\nvar dst = { a: 0 };\n\ncopyProps(src, dst, function(srcInfo) {\n  if (srcInfo.keyChain === 'a') {\n    return srcInfo.value * 2;\n  }\n  if (srcInfo.keyChain === 'b.b1') {\n    return srcInfo.value.toUpperCase();\n  }\n});\n// => { a: 2, b: { b1: 'BBB' } }\n```\n\nCan use an array instead of a map as property mapping :\n\n```js\nvar src = { a: 1, b: { c: 'CCC' }, d: { e: 'EEE' } };\nvar dst = { a: 9, b: { c: 'xxx' }, d: { e: 'yyy' } };\nvar fromto = [ 'b.c', 'd.e' ];\ncopyProps(src, dst, fromto);\n// => { a: 9, b: { c: 'CCC' }, d: { e: 'EEE' } }\n```\n\nCan copy reversively (from *dst* to *src*) by reverse flag (and return *src*):\n\n```js\nvar src = { a: 1, b: { b1: 'bbb' }, c: 'ccc' };\nvar dst = { a: 2, b: { b1: 'xxx', b2: 'yyy' } };\n\ncopyProps(src, dst, true);\n// => { a: 2, b: { b1: 'xxx', b2: 'yyy' }, c: 'ccc' }\n```\n\n```js\nvar src = { a: 1, b: { b1: 'bbb' }, c: 'ccc', d: 'ddd' };\nvar dst = { f: { a: 2, b1: 'xxx', b2: 'yyy' }, e: 'zzz' };\n\ncopyProps(src, dst, {\n  a: 'f.a',\n  'b.b2': 'f.b2',\n  'c': 'f.c',\n}, true);\n// => { a: 2, b: { b1: 'bbb', b2: 'yyy' }, c: 'ccc', d: 'ddd' }\n```\n\nIf a value of source property is undefined (when not using converter), or a result of converter is undefined (when using converter), the value is not copied.\n\n```js\nvar src = { a: 'A', b: undefined, c: null, d: 1 };\nvar dst = { a: 'a', b: 'b', c: 'c' };\n\ncopyProps(src, dst, function(srcInfo) {\n  if (srcInfo.keyChain === 'd') {\n    return undefined;\n  } else {\n    return srcInfo.value;\n  }\n});\n// => { a: 'A', b: 'b', c: null }\n```\n\nYou can operate the parent node object directly in converter.\n\n```js\nvar src = { a: 1, b: 2 };\nvar dst = {};\n\ncopyProps(src, dst, function(srcInfo, dstInfo) {\n  Object.defineProperty(dstInfo.parent, dstInfo.key, {\n    writable: false,\n    enumerable: true,\n    configurable: false,\n    value: srcInfo.value * 2\n  })\n}); // => { a: 2, b: 4 }\n\ndst // => { a: 2, b: 4 }\ndst.a = 9\ndst // -> { a: 2, b: 4 }\n```\n\n## API\n\n### <u>copyProps(src, dst [, fromto] [, converter] [, reverse]) => object</u>\n\nCopy properties of *src* to *dst* deeply.\nIf *fromto* is given, it is able to copy between different properties.\nIf *converter* is given, it is able to convert the terminal values.\n\n#### Parameters:\n\n| Parameter   |  Type  | Description                                      |\n|:------------|:------:|:-------------------------------------------------|\n| *src*       | object | A source object of copy.                         |\n| *dst*       | object | A destinate object of copy.                      |\n| *fromto*    | object &#124; array | An object mapping properties between *src* and *dst*. (Optional) |\n| *converter* |function| A function to convert terminal values in *src*. (Optional) |\n| *reverse*   |boolean | True, if copying reversively from dst to src and returns src object. `fromto` is also reversively used from value to key. This default value is `false`. (Optional) |\n\n#### Returns:\n\n*dst* object after copying.\n\n**Type:** object\n\n* **Format of <i>fromto</i>**\n\n    *fromto* is a non-nested key-value object. And the *key*s are property key    chains of *src* and the *value*s are property key chains of *dst*. \n    The key chain is a string which is concatenated property keys on each level with dots, like `'aaa.bbb.ccc'`.\n\n    The following example copys the value of `src.aaa.bbb.ccc` to `dst.xxx.yyy`.\n\n    ```js\n    copyProps(src, dst, {\n      'aaa.bbb.ccc' : 'xxx.yyy'\n    })\n    ```\n\n    *fromto* can be an array. In that case, the array works as a map which has pairs of same key and value.\n    \n* **API of <i>converter</i>**\n\n    **<u>converter(srcInfo, dstInfo) : Any</u>**\n\n    *converter* is a function to convert terminal values of propeerties of *src*.\n\n    **Parameters:**\n\n    | Parameter   |  Type  | Description                                  |\n    |:------------|:------:|:---------------------------------------------|\n    | *srcInfo*   | object | An object which has informations about the current node of *src*. |\n    | *dstInfo*   | object | An object which has informations about the current node of *dst*. |\n    \n    **Return:**\n    \n    The converted value to be set as a destination property value. If this value is undefined, the destination property is not set to the destination node object.\n    \n    **Type:** *Any*\n    \n    * **Properties of <i>srcInfo</i> and <i>dstInfo</i>**\n\n        *srcInfo* and *dstInfo* has same properties, as follows:\n    \n        | Property   |  Type  | Description                               |\n        |:-----------|:------:|:------------------------------------------|\n        | *value*    | *Any*  | The value of the current node.            |\n        | *key*      | string | The key name of the current node.         |\n        | *keyChain* | string | The full key of the current node concatenated with dot. |\n        | *depth*    | number | The depth of the current node.            |\n        | *parent*   | object | The parent node of the current node.      |\n\n\n## License\n\nCopyright (C) 2016-2018 Takayuki Sato\n\nThis program is free software under [MIT][mit-url] License.\nSee the file LICENSE in this distribution for more details.\n\n[repo-url]: https://github.com/sttk/copy-props/\n[npm-img]: https://img.shields.io/badge/npm-v2.0.4-blue.svg\n[npm-url]: https://www.npmjs.org/package/copy-props/\n[mit-img]: https://img.shields.io/badge/license-MIT-green.svg\n[mit-url]: https://opensource.org/licenses.MIT\n[travis-img]: https://travis-ci.org/sttk/copy-props.svg?branch=master\n[travis-url]: https://travis-ci.org/sttk/copy-props\n[appveyor-img]: https://ci.appveyor.com/api/projects/status/github/sttk/copy-props?branch=master&svg=true\n[appveyor-url]: https://ci.appveyor.com/project/sttk/copy-props\n[coverage-img]: https://coveralls.io/repos/github/sttk/copy-props/badge.svg?branch=master\n[coverage-url]: https://coveralls.io/github/sttk/copy-props?branch=master\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sttk/copy-props.git"
  },
  "scripts": {
    "build": "npm run lint && npm run coverage && npm run web:build && node test/web/make.js",
    "chrome:install": "npm i --no-save mocha-chrome",
    "chrome:test": "mocha-chrome test/web/browser-test.html",
    "coverage": "nyc --reporter=lcov --reporter=text-summary npm test",
    "coveralls": "nyc --reporter=text-lcov npm test | coveralls",
    "lint": "eslint .",
    "test": "mocha",
    "web:build": "browserify index.js --standalone copyProps -o web/copy-props.js && cd web && uglifyjs copy-props.js --compress --mangle -o copy-props.min.js --source-map url=copy-props.min.js.map"
  },
  "version": "2.0.4"
}
