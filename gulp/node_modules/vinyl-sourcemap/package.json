{
  "_args": [
    [
      {
        "raw": "vinyl-sourcemap@^1.1.0",
        "scope": null,
        "escapedName": "vinyl-sourcemap",
        "name": "vinyl-sourcemap",
        "rawSpec": "^1.1.0",
        "spec": ">=1.1.0 <2.0.0",
        "type": "range"
      },
      "C:\\gulp\\node_modules\\vinyl-fs"
    ]
  ],
  "_from": "vinyl-sourcemap@>=1.1.0 <2.0.0",
  "_id": "vinyl-sourcemap@1.1.0",
  "_inCache": true,
  "_location": "/vinyl-sourcemap",
  "_nodeVersion": "0.10.48",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/vinyl-sourcemap-1.1.0.tgz_1501616166889_0.9932172652333975"
  },
  "_npmUser": {
    "name": "phated",
    "email": "blaine.bublitz@gmail.com"
  },
  "_npmVersion": "2.15.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vinyl-sourcemap@^1.1.0",
    "scope": null,
    "escapedName": "vinyl-sourcemap",
    "name": "vinyl-sourcemap",
    "rawSpec": "^1.1.0",
    "spec": ">=1.1.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/vinyl-fs"
  ],
  "_resolved": "https://registry.npmjs.org/vinyl-sourcemap/-/vinyl-sourcemap-1.1.0.tgz",
  "_shasum": "92a800593a38703a8cdb11d8b300ad4be63b3e16",
  "_shrinkwrap": null,
  "_spec": "vinyl-sourcemap@^1.1.0",
  "_where": "C:\\gulp\\node_modules\\vinyl-fs",
  "author": {
    "name": "Gulp Team",
    "email": "team@gulpjs.com",
    "url": "http://gulpjs.com/"
  },
  "bugs": {
    "url": "https://github.com/gulpjs/vinyl-sourcemap/issues"
  },
  "contributors": [
    {
      "name": "Robin Venneman"
    },
    {
      "name": "Blaine Bublitz",
      "email": "blaine.bublitz@gmail.com"
    }
  ],
  "dependencies": {
    "append-buffer": "^1.0.2",
    "convert-source-map": "^1.5.0",
    "graceful-fs": "^4.1.6",
    "normalize-path": "^2.1.1",
    "now-and-later": "^2.0.0",
    "remove-bom-buffer": "^3.0.0",
    "vinyl": "^2.0.0"
  },
  "description": "Add/write sourcemaps to/from Vinyl files.",
  "devDependencies": {
    "eslint": "^1.10.3",
    "eslint-config-gulp": "^2.0.0",
    "expect": "^1.20.2",
    "istanbul": "^0.4.3",
    "istanbul-coveralls": "^1.0.3",
    "jscs": "^2.4.0",
    "jscs-preset-gulp": "^1.0.0",
    "mississippi": "^1.3.0",
    "mocha": "^3.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "92a800593a38703a8cdb11d8b300ad4be63b3e16",
    "tarball": "https://registry.npmjs.org/vinyl-sourcemap/-/vinyl-sourcemap-1.1.0.tgz"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "files": [
    "LICENSE",
    "index.js",
    "lib/"
  ],
  "gitHead": "4121a96458f1f78709411b083655c520a679e49e",
  "homepage": "https://github.com/gulpjs/vinyl-sourcemap#readme",
  "keywords": [
    "vinyl",
    "sourcemap",
    "gulp"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "phated",
      "email": "blaine.bublitz@gmail.com"
    }
  ],
  "name": "vinyl-sourcemap",
  "optionalDependencies": {},
  "readme": "<p align=\"center\">\n  <a href=\"http://gulpjs.com\">\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\n  </a>\n</p>\n\n# vinyl-sourcemap\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![AppVeyor Build Status][appveyor-image]][appveyor-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url]\n\nAdd/write sourcemaps to/from Vinyl files.\n\n## Usage\n\n```js\nsourcemap.add(file, function(err, updatedFile) {\n  // updatedFile will have a .sourceMap property\n});\n\n// The 2nd argument can be given as a path string\nsourcemap.write(file, './maps', function(err, updatedFile, sourcemapFile) {\n  // sourcemapFile will be a Vinyl file to be written to some location\n  // updatedFile will have the .contents property updated with a sourceMappingURL that resolves to sourcemapFile\n});\n\n// If not defined, the sourcemap is inlined\nsourcemap.write(file, function(err, updatedFile, sourcemapFile) {\n  // sourcemapFile is undefined\n  // updatedFile will have the .contents property updated with a sourceMappingURL that is an inlined sourcemap\n});\n```\n\n## API\n\n### `sourcemap.add(file, callback)`\n\nTakes a [Vinyl][vinyl] `file` object and a `callback` function. It attempts to parse an inline sourcemap or load an external sourcemap for the file. If a valid sourcemap is found, the `sources` & `sourcesContent` properties are resolved to actual files (if possible) and a fully resolved sourcemap is attached as `file.sourceMap`. If a sourcemap is not found, a stub sourcemap is generated for the file and attached as `file.sourceMap`.\n\nOnce all resolution is complete, the `callback(err, updatedFile)` is called with the `updatedFile`. If an error occurs, it will be passed as `err` and `updatedFile` will be undefined. __Note:__ The original file is mutated but `updatedFile` is passed to the callback as a convenience.\n\nIf the `file` is not a Vinyl object or the contents are streaming, an Error will be passed to the `callback`.\n\nIf the `file` has a `.sourceMap` property or the contents are null, the `callback` will be called immediately without mutation to the file.\n\nAll filesystem operations are optional & non-fatal so any errors will not be bubbled to the `callback`.\n\n### `sourcemap.write(file, [outputPath,] callback)`\n\nTakes a [Vinyl][vinyl] `file` object, (optionally) an `outputPath` string and a `callback` function.\n\nIf `outputPath` is not passed, an inline sourcemap will be generated from the `file.sourceMap` property and appended to the `file.contents`. Once the inline sourcemap is appended, the `callback(err, updatedFile)` is called with the `updatedFile`. If an error occurs, it will be passed as `err` and `updatedFile` will be undefined. __Note:__ The original file is mutated but `updatedFile` is passed to the callback as a convenience.\n\nIf `outputPath` is passed, a new Vinyl file will be generated using `file.cwd` and `file.base` from the original file, the path to the external sourcemap, and the `file.sourceMap` (as contents). The external location will be appended to the `file.contents` of the original file. Once the new file is created and location appended, the `callback(err, updatedFile, sourcemapFile)` is called with the `updatedFile` and the `sourcemapFile`. If an error occurs, it will be passed as `err` and `updatedFile`/`sourcemapFile` will be undefined. __Note:__ The original file is mutated but `updatedFile` is passed to the callback as a convenience.\n\nIf the `file` is not a Vinyl object or the contents are streaming, an Error will be passed to the `callback`.\n\nIf the `file` doesn't have a `.sourceMap` property or the contents are null, the `callback` will be called immediately without mutation to the file.\n\n## License\n\nMIT\n\n[vinyl]: https://github.com/gulpjs/vinyl\n\n[downloads-image]: http://img.shields.io/npm/dm/vinyl-sourcemap.svg\n[npm-url]: https://npmjs.com/package/vinyl-sourcemap\n[npm-image]: http://img.shields.io/npm/v/vinyl-sourcemap.svg\n\n[travis-url]: https://travis-ci.org/gulpjs/vinyl-sourcemap\n[travis-image]: http://img.shields.io/travis/gulpjs/vinyl-sourcemap.svg?label=travis-ci\n\n[appveyor-url]: https://ci.appveyor.com/project/gulpjs/vinyl-sourcemap\n[appveyor-image]: https://img.shields.io/appveyor/ci/gulpjs/vinyl-sourcemap.svg?label=appveyor\n\n[coveralls-url]: https://coveralls.io/r/gulpjs/vinyl-sourcemap\n[coveralls-image]: http://img.shields.io/coveralls/gulpjs/vinyl-sourcemap/master.svg\n\n[gitter-url]: https://gitter.im/gulpjs/gulp\n[gitter-image]: https://badges.gitter.im/gulpjs/gulp.png\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gulpjs/vinyl-sourcemap.git"
  },
  "scripts": {
    "cover": "istanbul cover _mocha --report lcovonly",
    "coveralls": "npm run cover && istanbul-coveralls",
    "lint": "eslint index.js lib/ test/add.js test/write.js && jscs index.js lib/ test/add.js test/write.js",
    "pretest": "npm run lint",
    "test": "mocha --async-only"
  },
  "version": "1.1.0"
}
