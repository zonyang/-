{
  "_args": [
    [
      {
        "raw": "ansi-colors@^2.0.5",
        "scope": null,
        "escapedName": "ansi-colors",
        "name": "ansi-colors",
        "rawSpec": "^2.0.5",
        "spec": ">=2.0.5 <3.0.0",
        "type": "range"
      },
      "E:\\github\\practice\\gulp\\node_modules\\gulp-connect"
    ]
  ],
  "_from": "ansi-colors@^2.0.5",
  "_hasShrinkwrap": false,
  "_id": "ansi-colors@2.0.5",
  "_location": "/gulp-connect/ansi-colors",
  "_nodeVersion": "10.3.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ansi-colors_2.0.5_1532026262247_0.37681899188095325"
  },
  "_npmUser": {
    "name": "doowb",
    "email": "brian.woodward@gmail.com"
  },
  "_npmVersion": "6.1.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ansi-colors@^2.0.5",
    "scope": null,
    "escapedName": "ansi-colors",
    "name": "ansi-colors",
    "rawSpec": "^2.0.5",
    "spec": ">=2.0.5 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gulp-connect"
  ],
  "_resolved": "https://registry.npmjs.org/ansi-colors/-/ansi-colors-2.0.5.tgz",
  "_shasum": "5da37825fef3e75f3bda47f760d64bfd10e15e10",
  "_shrinkwrap": null,
  "_spec": "ansi-colors@^2.0.5",
  "_where": "E:\\github\\practice\\gulp\\node_modules\\gulp-connect",
  "author": {
    "name": "Brian Woodward",
    "url": "https://github.com/doowb"
  },
  "bugs": {
    "url": "https://github.com/doowb/ansi-colors/issues"
  },
  "contributors": [
    {
      "name": "Brian Woodward",
      "url": "https://twitter.com/doowb"
    },
    {
      "name": "Jason Schilling",
      "url": "https://sourecode.de"
    },
    {
      "name": "Jon Schlinkert",
      "url": "http://twitter.com/jonschlinkert"
    },
    {
      "name": "Jordan",
      "url": "https://github.com/Silic0nS0ldier"
    },
    {
      "name": "Luke Edwards",
      "url": "https://lukeed.com"
    }
  ],
  "dependencies": {},
  "description": "Easily add ANSI colors to your text and symbols in the terminal.",
  "devDependencies": {
    "gulp-format-md": "^1.0.0",
    "justified": "^1.0.1",
    "mocha": "^3.5.3",
    "text-table": "^0.2.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-yAdfUZ+c2wetVNIFsNRn44THW+Lty6S5TwMpUfLA/UaGhiXbBv/F8E60/1hMLd0cnF/CDoWH8vzVaI5bAcHCjw==",
    "shasum": "5da37825fef3e75f3bda47f760d64bfd10e15e10",
    "tarball": "https://registry.npmjs.org/ansi-colors/-/ansi-colors-2.0.5.tgz",
    "fileCount": 5,
    "unpackedSize": 18711,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbUN2WCRA9TVsSAnZWagAAaEkP/0pk3tqhYSXRMbG5gOkf\njV9b+iPEO8XRCoqu0ydf7NXlwrLW7XeJj98IxSwe7h9LWVpgA9o2fhljRTnM\nAh/qC3TV4NkrOvsU4OeCZViZE3i7lWLQGkyrk1n0CxVevsmSmfo0hjXz9Tgw\n9/TL2ehK7wPB9O6PHHzApj0BgkOcOuY8Jp4eeIQi1hDTnrsgeYkrqq+wBgMM\nzSNWuozbKyxtDmWq/iGFjDrV/8QZXeMfPfa/3QvOx81EhJMLbJdgX1h/wCiL\n2qC4Lg3Jyli2k4nfaIWaTa/pq1g8zSMMJl9Z4C+dVNEmyKldSlQNwcZWJP+w\nyyXf2LS3ZQ4EQekIOQON0j4y1HJWYOGaVcUVmt7RTrCq7bvHiyK/l2osTNnc\nciDeG/e7uW3LeTxGWeoibTEy78qXbEecmQMbAf8tXwq4LrvS0gafVtbNjtSx\nUn1mOFBv73nTPCGbX4mqQN841belXDFf39kVaKL9gAts8+ud3/7WIBXjFm7/\nrmQ69EeZlV3k3qFDyQ6c8CTunsNbSW/oq/B/k1hulIY2vgdmRppBA7IqOnbi\nVyJpsIxtYrth7AQjUI5LE+KeLrLFaMKT5/g7QE6EupD7lwC3pZwoJ5JMI8Dr\nA4hxswrr60KbwnRyRmO6vWNMgKxfH7PvksqqXvaWJcVRJD0ugWE7JZ3EIiQu\n9No4\r\n=lO5V\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6"
  },
  "files": [
    "index.js",
    "types/index.d.ts"
  ],
  "gitHead": "71563fb8a56d3fd3014e868302dbf5e4f03e866d",
  "homepage": "https://github.com/doowb/ansi-colors",
  "keywords": [
    "ansi",
    "bgblack",
    "bgBlack",
    "bgblue",
    "bgBlue",
    "bgcyan",
    "bgCyan",
    "bggreen",
    "bgGreen",
    "bgmagenta",
    "bgMagenta",
    "bgred",
    "bgRed",
    "bgwhite",
    "bgWhite",
    "bgyellow",
    "bgYellow",
    "black",
    "blue",
    "bold",
    "colors",
    "cyan",
    "dim",
    "gray",
    "green",
    "grey",
    "hidden",
    "inverse",
    "italic",
    "magenta",
    "red",
    "reset",
    "strikethrough",
    "underline",
    "white",
    "yellow"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "doowb",
      "email": "brian.woodward@gmail.com"
    },
    {
      "name": "jonschlinkert",
      "email": "github@sellside.com"
    }
  ],
  "name": "ansi-colors",
  "optionalDependencies": {},
  "readme": "# ansi-colors [![NPM version](https://img.shields.io/npm/v/ansi-colors.svg?style=flat)](https://www.npmjs.com/package/ansi-colors) [![NPM monthly downloads](https://img.shields.io/npm/dm/ansi-colors.svg?style=flat)](https://npmjs.org/package/ansi-colors) [![NPM total downloads](https://img.shields.io/npm/dt/ansi-colors.svg?style=flat)](https://npmjs.org/package/ansi-colors) [![Linux Build Status](https://img.shields.io/travis/doowb/ansi-colors.svg?style=flat&label=Travis)](https://travis-ci.org/doowb/ansi-colors) [![Windows Build Status](https://img.shields.io/appveyor/ci/doowb/ansi-colors.svg?style=flat&label=AppVeyor)](https://ci.appveyor.com/project/doowb/ansi-colors)\n\n> Easily add ANSI colors to your text and symbols in the terminal.\n\nPlease consider following this project's author, [Brian Woodward](https://github.com/doowb), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save ansi-colors\n```\n\nansi-colors is a Node.js library for adding colors to text in the terminal. A more performant drop-in replacement for chalk, with no dependencies.\n\n![image](https://user-images.githubusercontent.com/383994/39635445-8a98a3a6-4f8b-11e8-89c1-068c45d4fff8.png)\n\n## Why use this?\n\n* Minimal - No dependencies! ([chalk](https://github.com/chalk/chalk) has 7 dependencies in its tree)\n* Safe - Does not modify the `String.prototype`\n* [Fast](#benchmarks) - Loads 5x faster and renders styles 10x faster than [chalk](https://github.com/chalk/chalk).\n* [Conditional color support](#conditional-color-support)\n* Supports [nested colors](#nested-colors)\n* Supports [chained colors](#chained-colors)!\n* Includes commonly used [symbols](#symbols)\n* Exposes a method for [stripping ANSI codes](#strip-ansi-codes)\n* [printf-like](#printf-formatting) formatting\n\nSee a [comparison to other libraries](#comparison)\n\n## Usage\n\n```js\nconst c = require('ansi-colors');\n\nconsole.log(c.red('This is a red string!'));\nconsole.log(c.green('This is a red string!'));\nconsole.log(c.cyan('This is a cyan string!'));\nconsole.log(c.yellow('This is a yellow string!'));\n```\n\n![image](https://user-images.githubusercontent.com/383994/39653848-a38e67da-4fc0-11e8-89ae-98c65ebe9dcf.png)\n\n## Features\n\nColors take multiple arguments.\n\n```js\nconsole.log(c.red('Some', 'red', 'text', 'to', 'display'));\n```\n\n### Chained styles\n\nSupports chained styles.\n\n```js\nconsole.log(c.bold.red('this is a bold red message'));\nconsole.log(c.bold.yellow.italic('this is a bold yellow italicized message'));\nconsole.log(c.green.bold.underline('this is a bold green underlined message'));\n```\n\n![image](https://user-images.githubusercontent.com/383994/39635780-7617246a-4f8c-11e8-89e9-05216cc54e38.png)\n\n### Nested styles\n\nSupports nested styles.\n\n```js\n// using template literals\nconsole.log(c.yellow(`foo ${c.red.bold('red')} bar ${c.cyan('cyan')} baz`));\n\n// or as arguments\nconsole.log(c.yellow('foo', c.red.bold('red'), 'bar', c.cyan('cyan'), 'baz'));\n```\n\n![image](https://user-images.githubusercontent.com/383994/39635817-8ed93d44-4f8c-11e8-8afd-8c3ea35f5fbe.png)\n\n### Conditional color support\n\nEasily enable/disable colors.\n\n```js\nconst c = require('ansi-colors');\n\n// disable colors manually\nc.enabled = false;\n\n// or use a library to automatically detect support\nc.enabled = require('color-support').stdout;\n\nconsole.log(c.red('I will only be colored red if the terminal supports colors'));\n```\n\n## printf-like formatting\n\nUses node's built-in [util.format()](https://nodejs.org/api/util.html#util_util_format_format_args) to achieve printf-like formatting. The first argument is a string containing zero or more placeholder tokens. Each placeholder token is replaced with the converted value from the corresponding argument.\n\n```js\nconsole.log(c.bold.red('%s:%s', 'foo', 'bar', 'baz'));\n```\n\n![image](https://user-images.githubusercontent.com/383994/39637118-1a12e682-4f90-11e8-8d22-246fee4abe40.png)\n\nEven works with nested colors!\n\n```js\nconsole.log(c.bold('%s:%s:%s', 'foo', c.red('bar'), 'baz'));\n```\n\n![image](https://user-images.githubusercontent.com/383994/39637327-9fc9081a-4f90-11e8-9995-42c43925fc2f.png)\n\n## Strip ANSI codes\n\nUse the `.unstyle` method to manually strip ANSI codes from a string.\n\n```js\nconsole.log(c.unstyle(c.blue.bold('foo bar baz')));\n//=> 'foo bar baz'\n```\n\n## Available styles\n\n**Note** that bright and bright-background colors are not always supported.\n\n### Colors\n\n* `black`\n* `blue`\n* `cyan`\n* `gray` (U.S.) and `grey` (everyone else)\n* `green`\n* `magenta`\n* `red`\n* `white`\n* `yellow`\n\n### Bright colors\n\n* `blueBright`\n* `cyanBright`\n* `greenBright`\n* `magentaBright`\n* `redBright`\n* `whiteBright`\n* `yellowBright`\n\n### Background colors\n\n* `bgBlack`\n* `bgBlue`\n* `bgCyan`\n* `bgGreen`\n* `bgMagenta`\n* `bgRed`\n* `bgWhite`\n* `bgYellow`\n\n**Bright background colors**\n\n* `bgBlackBright`\n* `bgBlueBright`\n* `bgCyanBright`\n* `bgGreenBright`\n* `bgMagentaBright`\n* `bgRedBright`\n* `bgWhiteBright`\n* `bgYellowBright`\n\n### Modifiers\n\n* `bold`\n* `dim`\n* `hidden`\n* `inverse`\n* `italic` _(Not widely supported)_\n\n* `reset`\n* `strikethrough` _(Not widely supported)_\n\n* `underline`\n\n## Symbols\n\nA handful of common useful symbols are available on the `c.symbols` property.\n\n```js\nconsole.log(c.symbols);\n```\n\n### Available symbols\n\n**Windows**\n\n* check:  `√`\n* cross:  `×`\n* ellipsis: `'...`\n* info:  `i`\n* line:  `─`\n* pointer: `'>`\n* pointerSmall:  `»`\n* question: `?`\n* questionSmall:  `﹖`\n* warning:  `‼`\n\n**Other platforms**\n\n* check: `✔`\n* cross: `✖`\n* ellipsis: `…`\n* info: `ℹ`\n* line: `─`\n* pointer: `❯`\n* pointerSmall: `›`\n* question: `?`\n* questionSmall: `﹖`\n* warning: `⚠`\n\n## Benchmarks\n\nMacBook Pro, Intel Core i7, 2.3 GHz, 16 GB.\n\n### Load time\n\nTime it takes to load the module the first time:\n\n```\nchalk: 11.795ms\nclorox: 1.019ms\nansi-colors: 0.867ms\n```\n\n### Performance\n\n```\n# All Colors\n  ansi-colors x 104,559 ops/sec ±0.80% (91 runs sampled)\n  chalk x 8,869 ops/sec ±2.09% (82 runs sampled)\n  clorox x 1,315 ops/sec ±2.19% (76 runs sampled)\n\n# Stacked colors\n  ansi-colors x 36,208 ops/sec ±0.65% (88 runs sampled)\n  chalk x 1,789 ops/sec ±1.77% (80 runs sampled)\n  clorox x 528 ops/sec ±2.00% (78 runs sampled)\n\n# Nested colors\n  ansi-colors x 42,828 ops/sec ±0.36% (90 runs sampled)\n  chalk x 4,082 ops/sec ±1.93% (83 runs sampled)\n  clorox x 628 ops/sec ±2.10% (60 runs sampled)\n```\n\n## Comparison\n\n| **Feature** | **ansi-colors** | **chalk** | **clorox** | **colors** |\n| --- | --- | --- | --- | --- |\n| Nested colors | yes | yes | no | yes |\n| Chained colors | yes | yes | You must call `.toString()` on result | yes |\n| Toggle color support | yes | yes | no | yes |\n| printf-like formatting | yes | no | no | no |\n| Includes symbols | yes | no | no | no |\n\n## About\n\n### Related projects\n\n* [ansi-wrap](https://www.npmjs.com/package/ansi-wrap): Create ansi colors by passing the open and close codes. | [homepage](https://github.com/jonschlinkert/ansi-wrap \"Create ansi colors by passing the open and close codes.\")\n* [strip-color](https://www.npmjs.com/package/strip-color): Strip ANSI color codes from a string. No dependencies. | [homepage](https://github.com/jonschlinkert/strip-color \"Strip ANSI color codes from a string. No dependencies.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** |  \n| --- | --- |  \n| 21 | [doowb](https://github.com/doowb) |  \n| 10 | [jonschlinkert](https://github.com/jonschlinkert) |  \n| 6  | [lukeed](https://github.com/lukeed) |  \n| 2  | [Silic0nS0ldier](https://github.com/Silic0nS0ldier) |  \n| 1  | [chapterjason](https://github.com/chapterjason) |  \n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Brian Woodward**\n\n* [github/doowb](https://github.com/doowb)\n* [twitter/doowb](https://twitter.com/doowb)\n\n### License\n\nCopyright © 2018, [Brian Woodward](https://github.com/doowb).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.7.0, on July 16, 2018._",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/doowb/ansi-colors.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "types": "./types/index.d.ts",
  "verb": {
    "toc": false,
    "layout": "default",
    "tasks": [
      "readme"
    ],
    "data": {
      "author": {
        "linkedin": "woodwardbrian",
        "twitter": "doowb"
      }
    },
    "plugins": [
      "gulp-format-md"
    ],
    "lint": {
      "reflinks": true
    },
    "related": {
      "list": [
        "ansi-wrap",
        "strip-color"
      ]
    },
    "reflinks": [
      "colors",
      "supports-color"
    ]
  },
  "version": "2.0.5"
}
