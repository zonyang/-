{
  "_args": [
    [
      {
        "raw": "value-or-function@^3.0.0",
        "scope": null,
        "escapedName": "value-or-function",
        "name": "value-or-function",
        "rawSpec": "^3.0.0",
        "spec": ">=3.0.0 <4.0.0",
        "type": "range"
      },
      "C:\\gulp\\node_modules\\vinyl-fs"
    ]
  ],
  "_from": "value-or-function@>=3.0.0 <4.0.0",
  "_id": "value-or-function@3.0.0",
  "_inCache": true,
  "_location": "/value-or-function",
  "_nodeVersion": "0.10.48",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/value-or-function-3.0.0.tgz_1500670075697_0.5566161137539893"
  },
  "_npmUser": {
    "name": "phated",
    "email": "blaine.bublitz@gmail.com"
  },
  "_npmVersion": "2.15.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "value-or-function@^3.0.0",
    "scope": null,
    "escapedName": "value-or-function",
    "name": "value-or-function",
    "rawSpec": "^3.0.0",
    "spec": ">=3.0.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/resolve-options",
    "/vinyl-fs"
  ],
  "_resolved": "https://registry.npmjs.org/value-or-function/-/value-or-function-3.0.0.tgz",
  "_shasum": "1c243a50b595c1be54a754bfece8563b9ff8d813",
  "_shrinkwrap": null,
  "_spec": "value-or-function@^3.0.0",
  "_where": "C:\\gulp\\node_modules\\vinyl-fs",
  "author": {
    "name": "Gulp Team",
    "email": "team@gulpjs.com",
    "url": "http://gulpjs.com/"
  },
  "bugs": {
    "url": "https://github.com/gulpjs/value-or-function/issues"
  },
  "contributors": [
    {
      "name": "Blaine Bublitz",
      "email": "blaine.bublitz@gmail.com"
    },
    {
      "name": "Hugo Wood",
      "email": "hx4.5@free.fr"
    }
  ],
  "dependencies": {},
  "description": "Normalize a value or function, applying extra args to the function",
  "devDependencies": {
    "eslint": "^1.10.3",
    "eslint-config-gulp": "^2.0.0",
    "expect": "^1.16.0",
    "istanbul": "^0.4.3",
    "istanbul-coveralls": "^1.0.3",
    "jscs": "^2.3.5",
    "jscs-preset-gulp": "^1.0.0",
    "mocha": "^2.4.5"
  },
  "directories": {},
  "dist": {
    "shasum": "1c243a50b595c1be54a754bfece8563b9ff8d813",
    "tarball": "https://registry.npmjs.org/value-or-function/-/value-or-function-3.0.0.tgz"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "44e5b5808a46a6e22fee66ad2508d2d1a0e1477c",
  "homepage": "https://github.com/gulpjs/value-or-function#readme",
  "keywords": [
    "options",
    "normalize",
    "value",
    "function"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "contra",
      "email": "contra@wearefractal.com"
    },
    {
      "name": "phated",
      "email": "blaine.bublitz@gmail.com"
    }
  ],
  "name": "value-or-function",
  "optionalDependencies": {},
  "readme": "<p align=\"center\">\n  <a href=\"http://gulpjs.com\">\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\n  </a>\n</p>\n\n# value-or-function\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![AppVeyor Build Status][appveyor-image]][appveyor-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url]\n\nNormalize a value or function, applying extra args to the function\n\n## Example\n\n```js\nvar normalize = require('value-or-function');\n\n// Values matching type are returned\nvar isEnabled = normalize('boolean', true);\n// isEnabled === true\n\n// Values not matching type return undefined\nvar isEnabled = normalize('boolean', 1);\n// isEnabled === undefined\n\n// Functions are called\nvar isEnabled = normalize('boolean', function() {\n  return false;\n});\n// isEnabled === false\n\n// Extra arguments are applied to function\nvar count = normalize('number', function(a, b) {\n  return a + b;\n}, 1, 2);\n// count === 3\n\n// Supply the function with context\nvar context = { c: 3 };\nvar count = normalize.call(context, 'number', function(a, b) {\n  return a + b + this.c;\n}, 1, 2);\n// count === 6\n\n// Values one of multiple types are returned\nvar isEnabled = normalize(['string', 'boolean'], true);\n// isEnabled === true\n\n// Provide a function as first argument to do custom coercion\nvar now = new Date();\nvar enabledSince = normalize(function(value) {\n  if (value.constructor === Date) {\n    return value;\n  }\n}, now);\n// enabledSince === now\n\n// Convenience methods are available for the built-in types\nvar result = normalize.object({});\nvar result = normalize.number(1);\nvar result = normalize.string('');\nvar result = normalize.symbol(Symbol());\nvar result = normalize.boolean(true);\nvar result = normalize.function(function() {});\nvar result = normalize.date(new Date());\n```\n\n## API\n\n### `normalize(coercer, value[, ...appliedArguments])`\n\nTakes a coercer function `coercer` to transform `value` to the desired type.\nAlso optionally takes any extra arguments to apply to `value` if `value` is a function.\n\nIf the return value of `coercer(value)` is not `null` or `undefined`, that value is returned.\nOtherwise, if `value` is a function, that function is called with any extra arguments\nsupplied to `normalize`, and its return value is passed through the coercer.\n\nIf `coercer` is a string, it must be one of the built-in types (see below)\nand the appropriate default coercer is invoked, optionally first reducing `value`\nto a primitive type with `.valueOf()` if it is an Object.\n\nIf `coercer` is an array, each element is tried until one returns something other\nthan `null` or `undefined`, or it results in `undefined` if all of the elements yield `null` or `undefined`.\n\n#### `normalize.object(value[, ...appliedArguments])`\n\nConvenience method for `normalize('object', ...)`.\n\n#### `normalize.number(value[, ...appliedArguments])`\n\nConvenience method for `normalize('number', ...)`.\n\n#### `normalize.string(value[, ...appliedArguments])`\n\nConvenience method for `normalize('string', ...)`.\n\n#### `normalize.symbol(value[, ...appliedArguments])`\n\nConvenience method for `normalize('symbol', ...)`.\n\n#### `normalize.boolean(value[, ...appliedArguments])`\n\nConvenience method for `normalize('boolean', ...)`.\n\n#### `normalize.function(value[, ...appliedArguments])`\n\nConvenience method for `normalize('function', ...)`.\n\n#### `normalize.date(value[, ...appliedArguments])`\n\nConvenience method for `normalize('date', ...)`.\n\n## License\n\nMIT\n\n[downloads-image]: http://img.shields.io/npm/dm/value-or-function.svg\n[npm-url]: https://npmjs.org/package/value-or-function\n[npm-image]: http://img.shields.io/npm/v/value-or-function.svg\n\n[travis-url]: https://travis-ci.org/gulpjs/value-or-function\n[travis-image]: http://img.shields.io/travis/gulpjs/value-or-function.svg?label=travis-ci\n\n[appveyor-url]: https://ci.appveyor.com/project/gulpjs/value-or-function\n[appveyor-image]: https://img.shields.io/appveyor/ci/gulpjs/value-or-function.svg?label=appveyor\n\n[coveralls-url]: https://coveralls.io/r/gulpjs/value-or-function\n[coveralls-image]: http://img.shields.io/coveralls/gulpjs/value-or-function/master.svg\n\n[gitter-url]: https://gitter.im/gulpjs/gulp\n[gitter-image]: https://badges.gitter.im/gulpjs/gulp.png\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gulpjs/value-or-function.git"
  },
  "scripts": {
    "cover": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly",
    "coveralls": "npm run cover && istanbul-coveralls",
    "lint": "eslint . && jscs index.js test/",
    "pretest": "npm run lint",
    "test": "mocha --async-only"
  },
  "version": "3.0.0"
}
